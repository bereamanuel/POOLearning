[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\manue\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\manue\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.8 (Oracle Corporation Java 1.8.0_291)
[debug]       Load.loadUnit: plugins took 306.1603ms
[debug]       Load.loadUnit: defsScala took 0.5683ms
[debug] [Loading] Scanning directory C:\Users\manue\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\manue\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 33.8114 ms
[debug]           Load.resolveProject(global-plugins) took 64.1412ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\manue\.sbt\1.0\plugins, plugins: List(<none>))) took 145.2922ms
[debug] [Loading] Done in C:\Users\manue\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 189.2382ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4158ms
[debug]     Load.loadUnit(file:/C:/Users/manue/.sbt/1.0/plugins/, ...) took 512.3248ms
[debug]   Load.apply: load took 746.4771ms
[debug]   Load.apply: resolveProjects took 10.5715ms
[debug]   Load.apply: finalTransforms took 113.281ms
[debug]   Load.apply: config.delegates took 12.8841ms
[debug]   Load.apply: Def.make(settings)... took 790.3124ms
[debug]   Load.apply: structureIndex took 255.604ms
[debug]   Load.apply: mkStreams took 6.1129ms
[info] loading global plugins from C:\Users\manue\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4622.5658ms
[debug]           Load.loadUnit: plugins took 25.7736ms
[debug]           Load.loadUnit: defsScala took 0.0033ms
[debug] [Loading] Scanning directory C:\Users\manue\Desktop\POOLearning\POOLearning\project
[debug]             Load.loadUnit: mkEval took 9.9287ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\manue\Desktop\POOLearning\POOLearning\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.6841 ms
[info] loading settings for project poolearning-build from idea.sbt ...
[debug]               Load.resolveProject(poolearning-build) took 3.1577ms
[debug]             Load.loadTransitive: finalizeProject(Project(id poolearning-build, base: C:\Users\manue\Desktop\POOLearning\POOLearning\project, plugins: List(<none>))) took 6.5765ms
[debug] [Loading] Done in C:\Users\manue\Desktop\POOLearning\POOLearning\project, returning: (poolearning-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2722.9832ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.0409ms
[debug]         Load.loadUnit(file:/C:/Users/manue/Desktop/POOLearning/POOLearning/project/, ...) took 2756.0845ms
[debug]       Load.apply: load took 2757.9228ms
[debug]       Load.apply: resolveProjects took 0.1981ms
[debug]       Load.apply: finalTransforms took 7.4774ms
[debug]       Load.apply: config.delegates took 0.3705ms
[debug]       Load.apply: Def.make(settings)... took 79.3078ms
[debug]       Load.apply: structureIndex took 22.5388ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from C:\Users\manue\Desktop\POOLearning\POOLearning\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4699.0589ms
[debug]     Load.loadUnit: defsScala took 0.0031ms
[debug] [Loading] Scanning directory C:\Users\manue\Desktop\POOLearning\POOLearning
[debug]       Load.loadUnit: mkEval took 0.2769ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\manue\Desktop\POOLearning\POOLearning, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.9844 ms
[info] loading settings for project poolearning from build.sbt ...
[debug]         Load.resolveProject(poolearning) took 44.0992ms
[debug]       Load.loadTransitive: finalizeProject(Project(id poolearning, base: C:\Users\manue\Desktop\POOLearning\POOLearning, plugins: List(<none>))) took 48.3024ms
[debug] [Loading] Done in C:\Users\manue\Desktop\POOLearning\POOLearning, returning: (poolearning)
[debug]     Load.loadUnit: loadedProjectsRaw took 1005.3298ms
[debug]     Load.loadUnit: cleanEvalClasses took 13.224ms
[debug]   Load.loadUnit(file:/C:/Users/manue/Desktop/POOLearning/POOLearning/, ...) took 5718.4769ms
[debug] Load.apply: load took 5720.2991ms
[debug] Load.apply: resolveProjects took 0.1639ms
[debug] Load.apply: finalTransforms took 35.3968ms
[debug] Load.apply: config.delegates took 0.4006ms
[debug] Load.apply: Def.make(settings)... took 137.982ms
[debug] Load.apply: structureIndex took 24.2466ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to POOLearning (in build file:/C:/Users/manue/Desktop/POOLearning/POOLearning/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 52738 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 52738, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to POOLearning (in build file:/C:/Users/manue/Desktop/POOLearning/POOLearning/)
[debug] > Exec(idea-shell, None, None)
